Index: src/Model/Squarantine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\r\n\r\nimport Controller.Constants;\r\nimport View.GameFrame;\r\n\r\nimport java.util.Random;\r\n\r\npublic class Squarantine extends GameObjects implements movable {\r\n\r\n    private int xVelocity;\r\n    private int yVelocity;\r\n    private int [] xPoints;\r\n    private int [] yPoints;\r\n    private int HP;\r\n    private int collectible;\r\n    private int HPPerAttack;\r\n    // number of HP it costs from epsilon per each attack\r\n    private final Epsilon epsilon;\r\n    private int epsilonXPos;\r\n    private int epsilonYPos;\r\n    private int squarantineXPos;\r\n    private int squarantineYPos;\r\n    private int angle;\r\n    private int speed;\r\n    public Squarantine(int x, int y) {\r\n        super(x, y);\r\n        epsilon = GameFrame.getEpsilon();\r\n    }\r\n\r\n    public int getxVelocity() {\r\n        return xVelocity;\r\n    }\r\n\r\n    public void setxVelocity(int xVelocity) {\r\n        this.xVelocity = xVelocity;\r\n    }\r\n\r\n    public int getyVelocity() {\r\n        return yVelocity;\r\n    }\r\n\r\n    public void setyVelocity(int yVelocity) {\r\n        this.yVelocity = yVelocity;\r\n    }\r\n\r\n    public int[] getxPoints() {\r\n        return xPoints;\r\n    }\r\n\r\n    public void setxPoints(int[] xPoints) {\r\n        this.xPoints = xPoints;\r\n    }\r\n\r\n    public int[] getyPoints() {\r\n        return yPoints;\r\n    }\r\n\r\n    public void setyPoints(int[] yPoints) {\r\n        this.yPoints = yPoints;\r\n    }\r\n\r\n    public int getHP() {\r\n        return HP;\r\n    }\r\n\r\n    public void setHP(int HP) {\r\n        this.HP = HP;\r\n    }\r\n\r\n    public int getCollectible() {\r\n        return collectible;\r\n    }\r\n\r\n    public void setCollectible(int collectible) {\r\n        this.collectible = collectible;\r\n    }\r\n\r\n    public int getHPPerAttack() {\r\n        return HPPerAttack;\r\n    }\r\n\r\n    public void setHPPerAttack(int HPPerAttack) {\r\n        this.HPPerAttack = HPPerAttack;\r\n    }\r\n\r\n    public int getEpsilonXPos() {\r\n        return epsilonXPos;\r\n    }\r\n\r\n    public void setEpsilonXPos(int epsilonXPos) {\r\n        this.epsilonXPos = epsilonXPos;\r\n    }\r\n\r\n    public int getEpsilonYPos() {\r\n        return epsilonYPos;\r\n    }\r\n\r\n    public void setEpsilonYPos(int epsilonYPos) {\r\n        this.epsilonYPos = epsilonYPos;\r\n    }\r\n\r\n    public int getSquarantineXPos() {\r\n        return squarantineXPos;\r\n    }\r\n\r\n    public void setSquarantineXPos(int squarantineXPos) {\r\n        squarantineXPos = squarantineXPos;\r\n    }\r\n\r\n    public int getSquarantineYPos() {\r\n        return squarantineYPos;\r\n    }\r\n\r\n    public void setSquarantineYPos(int squarantineYPos) {\r\n        squarantineYPos = squarantineYPos;\r\n    }\r\n\r\n    public int getAngle() {\r\n        return angle;\r\n    }\r\n\r\n    public void setAngle(int angle) {\r\n        this.angle = angle;\r\n    }\r\n\r\n    @Override\r\n    public void move() {\r\n\r\n        epsilonXPos = epsilon.getX();\r\n        epsilonYPos = epsilon.getY();\r\n\r\n        squarantineXPos = (xPoints[0]+xPoints[1]+xPoints[2]+xPoints[3])/4;\r\n        squarantineYPos = (yPoints[0]+yPoints[1]+yPoints[2]+yPoints[3])/4;\r\n\r\n        angle = (int) Math.atan2(epsilonYPos-squarantineYPos,epsilonXPos-squarantineXPos);\r\n\r\n\r\n        Random random = new Random();\r\n        boolean aggressionMechanic = random.nextInt(15) == 1;\r\n        // create squarantine random aggression mechanism\r\n\r\n\r\n        if(!aggressionMechanic) {\r\n            speed = Constants.squarantineNormalSpeed();\r\n            this.setxVelocity((int) (speed * Math.cos(angle)));\r\n            this.setyVelocity((int) (speed * Math.sin(angle)));\r\n            speed -= Constants.squarantineAcceleration();\r\n            if(speed<=2){\r\n                speed = 2;\r\n            }\r\n        }else{\r\n\r\n            this.setxVelocity((int) (speed * Math.cos(angle)));\r\n            this.setyVelocity((int) (speed * Math.sin(angle)));\r\n            speed += Constants.squarantineAcceleration();\r\n            speed += Constants.squarantineAcceleration();\r\n        }\r\n\r\n\r\n\r\n        xPoints[0] += getxVelocity();\r\n        xPoints[1] += getxVelocity();\r\n        xPoints[2] += getxVelocity();\r\n        xPoints[3] += getxVelocity();\r\n\r\n        yPoints[0] += getyVelocity();\r\n        yPoints[1] += getyVelocity();\r\n        yPoints[2] += getyVelocity();\r\n        yPoints[3] += getyVelocity();\r\n\r\n        squarantineXPos += getxVelocity();\r\n        squarantineYPos += getyVelocity();\r\n\r\n\r\n        this.setX(getX() + getxVelocity());\r\n        this.setY(getY() + getyVelocity());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/Squarantine.java b/src/Model/Squarantine.java
--- a/src/Model/Squarantine.java	
+++ b/src/Model/Squarantine.java	
@@ -136,7 +136,7 @@
 
 
         Random random = new Random();
-        boolean aggressionMechanic = random.nextInt(15) == 1;
+        boolean aggressionMechanic = random.nextInt(5) == 1;
         // create squarantine random aggression mechanism
 
 
