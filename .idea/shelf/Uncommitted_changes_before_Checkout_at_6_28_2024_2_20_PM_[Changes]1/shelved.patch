Index: src/Controller/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage Controller;\r\n\r\nimport Model.*;\r\nimport Model.Entity.*;\r\nimport Model.enums.Ability;\r\nimport Sound.SoundPlayer;\r\nimport View.*;\r\nimport View.entityViews.*;\r\n\r\nimport java.awt.*;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class Game {\r\n\r\n    private static final ArrayList<ShotGun> shot = new ArrayList<>();\r\n    private static Epsilon epsilon;\r\n    private static ShotGun shotGun;\r\n    private static ArrayList<Squarantine> squarantines;\r\n    private static ArrayList<Trigorath> trigoraths;\r\n    private static ArrayList<Necropick> necropicks;\r\n    private static ArrayList<Omenoct> omenocts;\r\n    private static ArrayList<Archmire> archmires;\r\n    private static EpsilonView epsilonView;\r\n    private static ShotGunView shotGunView;\r\n    private static TrigorathView trigorathView;\r\n    private static SquarantineView squarantineView;\r\n    private static VertexView vertexView;\r\n    private static CerberusView cerberusView;\r\n    private static GameInfoView gameInfoView;\r\n    private static NecropickView necropickView;\r\n    private static OmenoctView omenoctView;\r\n    private static ArchmireView archmireView;\r\n    protected GamePanel gamePanel;\r\n    protected KeyListener keyListener;\r\n    protected MouseListener mouseListener;\r\n    private static SoundPlayer soundPlayer;\r\n    private static HashMap<Ability,Integer> skillTreeAbilities;\r\n    private static ArrayList<Ability> currentAbilities;\r\n    private  static ArrayList<Cerberus> cerberuses;\r\n    private static ArrayList<GameObjects> enemies;\r\n\r\n    public Game() throws IOException, AWTException {\r\n\r\n       epsilon = new Epsilon(200, 200);\r\n        epsilon.setRadius(Constants.getEpsilonRadius());\r\n       epsilon.setXP(SkillTreeFrame.getCurrentXP());\r\n\r\n       shotGun = new ShotGun(Game.epsilon.getxCenter(), Game.epsilon.getyCenter());\r\n        shotGun.setWidth(Constants.getShotGunWidth());\r\n        shotGun.setHeight(Constants.getShotGunHeight());\r\n\r\n        cerberuses = new ArrayList<>();\r\n\r\n\r\n        squarantines = new ArrayList<>();\r\n        trigoraths = new ArrayList<>();\r\n        necropicks = new ArrayList<>();\r\n        omenocts = new ArrayList<>();\r\n        archmires = new ArrayList<>();\r\n\r\n        enemies = new ArrayList<>();\r\n\r\n\r\n        epsilonView = new EpsilonView();\r\n        shotGunView = new ShotGunView();\r\n        trigorathView = new TrigorathView();\r\n        squarantineView = new SquarantineView();\r\n        vertexView = new VertexView();\r\n        gameInfoView = new GameInfoView();\r\n        cerberusView = new CerberusView();\r\n        necropickView = new NecropickView();\r\n        omenoctView = new OmenoctView();\r\n        archmireView = new ArchmireView();\r\n        currentAbilities = new ArrayList<>();\r\n\r\n        skillTreeAbilities = new HashMap<>();\r\n        skillTreeAbilities.put(Ability.Ares,0);\r\n        skillTreeAbilities.put(Ability.Astrape,0);\r\n        skillTreeAbilities.put(Ability.Cerberus,0);\r\n        skillTreeAbilities.put(Ability.Aceso,0);\r\n        skillTreeAbilities.put(Ability.Melampus,0);\r\n        skillTreeAbilities.put(Ability.Chiron,0);\r\n        skillTreeAbilities.put(Ability.Proteus,0);\r\n        skillTreeAbilities.put(Ability.Dolus,0);\r\n        skillTreeAbilities.put(Ability.Empusa,0);\r\n\r\n\r\n        gamePanel = new GamePanel();\r\n\r\n        keyListener = new KeyListener(gamePanel);\r\n        mouseListener = new MouseListener(gamePanel);\r\n        soundPlayer = new SoundPlayer();\r\n        soundPlayer.playBackgroundMusic();\r\n\r\n\r\n\r\n    }\r\n\r\n    public static Epsilon getEpsilon() {\r\n        return epsilon;\r\n    }\r\n\r\n    public static ShotGun getShotGun(){\r\n        return shotGun;\r\n    }\r\n\r\n    public static ArrayList<Squarantine> getSquarantine() {\r\n        return squarantines;\r\n    }\r\n\r\n    public static ArrayList<Trigorath> getTrigoraths(){\r\n        return trigoraths;\r\n    }\r\n\r\n    public static ArrayList<ShotGun> getShots(){\r\n        return shot;\r\n    }\r\n\r\n    public static void addShot(int x, int y, int height, int width){\r\n        ShotGun shotGun = new ShotGun(x,y);\r\n        shotGun.setWidth(width);\r\n        shotGun.setHeight(height);\r\n        shot.add(shotGun);\r\n    }\r\n\r\n    public GamePanel getGameFrame() {\r\n        return gamePanel;\r\n    }\r\n\r\n    public static SoundPlayer getSoundPlayer() {\r\n        return soundPlayer;\r\n    }\r\n\r\n    public static EpsilonView getEpsilonView() {\r\n        return epsilonView;\r\n    }\r\n\r\n    public static ShotGunView getShotGunView() {\r\n        return shotGunView;\r\n    }\r\n\r\n    public static TrigorathView getTrigorathView() {\r\n        return trigorathView;\r\n    }\r\n\r\n    public static SquarantineView getSquarantineView() {\r\n        return squarantineView;\r\n    }\r\n\r\n    public static VertexView getVertexView() {\r\n        return vertexView;\r\n    }\r\n\r\n    public static GameInfoView getGameInfoView() {\r\n        return gameInfoView;\r\n    }\r\n\r\n    public static ArrayList<Cerberus> getCerberuses() {\r\n        return cerberuses;\r\n    }\r\n\r\n    public static CerberusView getCerberusView() {\r\n        return cerberusView;\r\n    }\r\n\r\n    public static ArrayList<GameObjects> getEnemies() {\r\n        return enemies;\r\n    }\r\n\r\n    public static NecropickView getNecropickView() {\r\n        return necropickView;\r\n    }\r\n\r\n    public static ArrayList<Necropick> getNecropicks() {\r\n        return necropicks;\r\n    }\r\n\r\n    public static ArrayList<Omenoct> getOmenocts() {\r\n        return omenocts;\r\n    }\r\n\r\n    public static OmenoctView getOmenoctView() {\r\n        return omenoctView;\r\n    }\r\n\r\n    public static ArrayList<Archmire> getArchmires() {\r\n        return archmires;\r\n    }\r\n\r\n    public static ArchmireView getArchmireView() {\r\n        return archmireView;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/Game.java b/src/Controller/Game.java
--- a/src/Controller/Game.java	
+++ b/src/Controller/Game.java	
@@ -8,6 +8,7 @@
 import View.*;
 import View.entityViews.*;
 
+import javax.swing.*;
 import java.awt.*;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -98,6 +99,9 @@
 
 
 
+
+
+
     }
 
     public static Epsilon getEpsilon() {
Index: src/Model/FrameSize.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\r\n\r\nimport Controller.Constants;\r\nimport Controller.Game;\r\nimport Model.enums.Direction;\r\nimport View.GamePanel;\r\n\r\nimport java.awt.*;\r\nimport java.io.IOException;\r\n\r\npublic class FrameSize {\r\n\r\n    GamePanel gamePanel;\r\n    private int newX;\r\n    private int newY;\r\n    private int minSize;\r\n\r\n    public FrameSize(GamePanel gamePanel) throws IOException {\r\n\r\n        this.gamePanel = gamePanel;\r\n    }\r\n    public void shrink (){\r\n     minSize = 200;\r\n     if(GameLoop.isWin()  && Game.getEpsilon().getRadius()>=GamePanel.getFRAME_HEIGHT()){\r\n         minSize = 0;\r\n     }\r\n     if(GameLoop.isLose()){\r\n         minSize = 0;\r\n     }\r\n\r\n        if(GamePanel.getFRAME_WIDTH()>=minSize && GamePanel.getFRAME_HEIGHT()>=minSize){\r\n\r\n            gamePanel.setFRAME_WIDTH(GamePanel.getFRAME_WIDTH()-2* Constants.shrinkAmount());\r\n            //   Constants.setFrameWidth(Constants.getFrameWidth()-2*Constants.shrinkAmount());\r\n            gamePanel.setFRAME_HEIGHT(GamePanel.getFRAME_HEIGHT()-2*Constants.shrinkAmount());\r\n            //   Constants.setFrameHeight(Constants.getFrameHeight()-2*Constants.shrinkAmount());\r\n            newX = gamePanel.getX() + Constants.shrinkAmount();\r\n            newY = gamePanel.getY() + Constants.shrinkAmount();\r\n            gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());\r\n            //    Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));\r\n            gamePanel.setBounds(newX,newY, GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());\r\n            //  GameFrame.getPanel().setBounds(newX,newY,gameFrame.getFRAME_WIDTH(),gameFrame.getFRAME_HEIGHT());\r\n            //   gamePanel.getRootPane().setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());\r\n            //  GameFrame.getPanel().setSize(gameFrame.getFRAME_WIDTH(),gameFrame.getFRAME_HEIGHT());\r\n        }\r\n    }\r\n    public void expand(Direction direction){\r\n\r\n        //expand game frame from right side\r\n        if(direction.equals(Direction.RIGHT)){\r\n            gamePanel.setFRAME_WIDTH(GamePanel.getFRAME_WIDTH()+Constants.expandAmount());\r\n            Constants.setFrameWidth(GamePanel.getFRAME_WIDTH()+Constants.expandAmount());\r\n            gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());\r\n            Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));\r\n            gamePanel.setLocation(gamePanel.getX()+1, gamePanel.getY());\r\n\r\n        }\r\n        //expand game frame from left side\r\n        if(direction.equals(Direction.LEFT)){\r\n            gamePanel.setFRAME_WIDTH(GamePanel.getFRAME_WIDTH()+Constants.expandAmount());\r\n            Constants.setFrameWidth(GamePanel.getFRAME_WIDTH()+Constants.expandAmount());\r\n            gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());\r\n            Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));\r\n            gamePanel.setLocation(gamePanel.getX()-(Constants.expandAmount()+1), gamePanel.getY());\r\n        }\r\n        //expand game frame from downside\r\n        if(direction.equals(Direction.DOWN)){\r\n            gamePanel.setFRAME_HEIGHT(GamePanel.getFRAME_HEIGHT()+Constants.expandAmount());\r\n            Constants.setFrameHeight(GamePanel.getFRAME_HEIGHT()+Constants.expandAmount());\r\n            gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());\r\n            Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));\r\n            gamePanel.setLocation(gamePanel.getX(), gamePanel.getY()+1);\r\n        }\r\n        //expand game frame from upside\r\n        if(direction.equals(Direction.UP)){\r\n            gamePanel.setFRAME_HEIGHT(GamePanel.getFRAME_HEIGHT()+Constants.expandAmount());\r\n            Constants.setFrameHeight(GamePanel.getFRAME_HEIGHT()+Constants.expandAmount());\r\n            gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());\r\n            Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));\r\n            gamePanel.setLocation(gamePanel.getX(), gamePanel.getY()-(Constants.expandAmount()+1));\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/FrameSize.java b/src/Model/FrameSize.java
--- a/src/Model/FrameSize.java	
+++ b/src/Model/FrameSize.java	
@@ -4,6 +4,7 @@
 import Controller.Game;
 import Model.enums.Direction;
 import View.GamePanel;
+import View.GlassFrame;
 
 import java.awt.*;
 import java.io.IOException;
@@ -29,19 +30,23 @@
      }
 
         if(GamePanel.getFRAME_WIDTH()>=minSize && GamePanel.getFRAME_HEIGHT()>=minSize){
-
-            gamePanel.setFRAME_WIDTH(GamePanel.getFRAME_WIDTH()-2* Constants.shrinkAmount());
-            //   Constants.setFrameWidth(Constants.getFrameWidth()-2*Constants.shrinkAmount());
-            gamePanel.setFRAME_HEIGHT(GamePanel.getFRAME_HEIGHT()-2*Constants.shrinkAmount());
-            //   Constants.setFrameHeight(Constants.getFrameHeight()-2*Constants.shrinkAmount());
-            newX = gamePanel.getX() + Constants.shrinkAmount();
-            newY = gamePanel.getY() + Constants.shrinkAmount();
-            gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
-            //    Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));
-            gamePanel.setBounds(newX,newY, GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
-            //  GameFrame.getPanel().setBounds(newX,newY,gameFrame.getFRAME_WIDTH(),gameFrame.getFRAME_HEIGHT());
-            //   gamePanel.getRootPane().setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
-            //  GameFrame.getPanel().setSize(gameFrame.getFRAME_WIDTH(),gameFrame.getFRAME_HEIGHT());
+            if(GlassFrame.getINSTANCE().getWidth()>=minSize && GlassFrame.getINSTANCE().getHeight()>=minSize) {
+                //   gamePanel.setFRAME_WIDTH(GamePanel.getFRAME_WIDTH()-2* Constants.shrinkAmount());
+                //   Constants.setFrameWidth(Constants.getFrameWidth()-2*Constants.shrinkAmount());
+                //   gamePanel.setFRAME_HEIGHT(GamePanel.getFRAME_HEIGHT()-2*Constants.shrinkAmount());
+                //   Constants.setFrameHeight(Constants.getFrameHeight()-2*Constants.shrinkAmount());
+                newX = gamePanel.getX() + Constants.shrinkAmount();
+                newY = gamePanel.getY() + Constants.shrinkAmount();
+                //      gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
+                GlassFrame.getINSTANCE().setSize(GlassFrame.getINSTANCE().getWidth() - 2 * Constants.shrinkAmount(),
+                        GlassFrame.getINSTANCE().getHeight() - 2 * Constants.shrinkAmount());
+     //           GlassFrame.getINSTANCE().setLocation(newX,newY);
+                //    Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));
+                //    gamePanel.setBounds(newX,newY, GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
+                //  GameFrame.getPanel().setBounds(newX,newY,gameFrame.getFRAME_WIDTH(),gameFrame.getFRAME_HEIGHT());
+                //   gamePanel.getRootPane().setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
+                //  GameFrame.getPanel().setSize(gameFrame.getFRAME_WIDTH(),gameFrame.getFRAME_HEIGHT());
+            }
         }
     }
     public void expand(Direction direction){
@@ -49,9 +54,12 @@
         //expand game frame from right side
         if(direction.equals(Direction.RIGHT)){
             gamePanel.setFRAME_WIDTH(GamePanel.getFRAME_WIDTH()+Constants.expandAmount());
+
             Constants.setFrameWidth(GamePanel.getFRAME_WIDTH()+Constants.expandAmount());
             gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
+            GlassFrame.getINSTANCE().setSize(GlassFrame.getINSTANCE().getWidth()+Constants.expandAmount(),GlassFrame.getINSTANCE().getHeight());
             Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));
+            GlassFrame.getINSTANCE().setLocation(GlassFrame.getINSTANCE().getX()+1,GlassFrame.getINSTANCE().getY());
             gamePanel.setLocation(gamePanel.getX()+1, gamePanel.getY());
 
         }
@@ -61,23 +69,32 @@
             Constants.setFrameWidth(GamePanel.getFRAME_WIDTH()+Constants.expandAmount());
             gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
             Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));
+            GlassFrame.getINSTANCE().setSize(GlassFrame.getINSTANCE().getWidth()+Constants.expandAmount()
+                    ,GlassFrame.getINSTANCE().getHeight());
             gamePanel.setLocation(gamePanel.getX()-(Constants.expandAmount()+1), gamePanel.getY());
+            GlassFrame.getINSTANCE().setLocation(GlassFrame.getINSTANCE().getX()-(Constants.expandAmount()+1),GlassFrame.getINSTANCE().getY());
         }
         //expand game frame from downside
         if(direction.equals(Direction.DOWN)){
             gamePanel.setFRAME_HEIGHT(GamePanel.getFRAME_HEIGHT()+Constants.expandAmount());
-            Constants.setFrameHeight(GamePanel.getFRAME_HEIGHT()+Constants.expandAmount());
+           Constants.setFrameHeight(GamePanel.getFRAME_HEIGHT()+Constants.expandAmount());
             gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
             Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));
+            GlassFrame.getINSTANCE().setSize(GlassFrame.getINSTANCE().getWidth(),GlassFrame.getINSTANCE().getHeight()+Constants.expandAmount());
             gamePanel.setLocation(gamePanel.getX(), gamePanel.getY()+1);
+            GlassFrame.getINSTANCE().setLocation(GlassFrame.getINSTANCE().getX(),GlassFrame.getINSTANCE().getY()+1);
+
         }
         //expand game frame from upside
         if(direction.equals(Direction.UP)){
             gamePanel.setFRAME_HEIGHT(GamePanel.getFRAME_HEIGHT()+Constants.expandAmount());
             Constants.setFrameHeight(GamePanel.getFRAME_HEIGHT()+Constants.expandAmount());
             gamePanel.setSize(GamePanel.getFRAME_WIDTH(), GamePanel.getFRAME_HEIGHT());
+            GlassFrame.getINSTANCE().setSize(GlassFrame.getINSTANCE().getWidth()
+                    ,GlassFrame.getINSTANCE().getHeight()+Constants.expandAmount());
             Constants.setScreenSize(new Dimension(Constants.getFrameWidth(),Constants.getFrameHeight()));
             gamePanel.setLocation(gamePanel.getX(), gamePanel.getY()-(Constants.expandAmount()+1));
+            GlassFrame.getINSTANCE().setLocation(GlassFrame.getINSTANCE().getX(),GlassFrame.getINSTANCE().getY()-(Constants.expandAmount()+1));
         }
 
     }
Index: src/View/GlassFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\nimport Controller.Constants;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.KeyEvent;\r\n\r\npublic final class GlassFrame extends JFrame {\r\n\r\n    private static GlassFrame INSTANCE;\r\n\r\n    private GlassFrame() throws HeadlessException{\r\n        setUndecorated(true);\r\n        setBackground(new Color(0,0,0,100));\r\n        setSize(Constants.glassFrameDimension());\r\n        setLocationRelativeTo(null);\r\n        setVisible(true);\r\n        setLayout(null);\r\n        setTitle(\"Window Kill\");\r\n\r\n    }\r\n    public static GlassFrame getINSTANCE(){\r\n        if(INSTANCE == null){\r\n            INSTANCE = new GlassFrame();\r\n        }\r\n        return INSTANCE;\r\n    }\r\n\r\n    public static void setINSTANCE(GlassFrame INSTANCE) {\r\n        GlassFrame.INSTANCE= INSTANCE;\r\n    }\r\n    public void closeFrame(){\r\n        Window window = SwingUtilities.getWindowAncestor(this);\r\n        window.dispose();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/View/GlassFrame.java b/src/View/GlassFrame.java
--- a/src/View/GlassFrame.java	
+++ b/src/View/GlassFrame.java	
@@ -13,7 +13,7 @@
     private GlassFrame() throws HeadlessException{
         setUndecorated(true);
         setBackground(new Color(0,0,0,100));
-        setSize(Constants.glassFrameDimension());
+        setSize(Constants.getFrameWidth(),Constants.getFrameHeight());
         setLocationRelativeTo(null);
         setVisible(true);
         setLayout(null);
Index: src/Model/GameLoop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\r\n\r\nimport Controller.*;\r\nimport Model.Entity.*;\r\nimport Model.enums.Direction;\r\nimport Model.enums.EnemyType;\r\nimport View.*;\r\nimport View.SettingsFrame;\r\nimport myproject.MyProject;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.geom.Point2D;\r\nimport java.io.IOException;\r\n\r\n\r\npublic class GameLoop {\r\n\r\n    private Game game;\r\n    private  Timer timer;\r\n    private FrameSize frameSize;\r\n    private Intersection intersection;\r\n    private Direction intersectionSide;\r\n    private int countTime;\r\n    // amount of time that has passed since the game has started\r\n    private int index= Game.getShots().size()-3;\r\n    //balls shooting one by on in empower mode\r\n    private int time=3;\r\n    //amount of time since shooting the next fire\r\n    private int empowerTime;\r\n    //amount of time that has passed since empower item is activated\r\n    private int banishTime;\r\n    //amount of time the has passed since banish item is activated\r\n    private Timer elapsedTimer;\r\n    private static int seconds;\r\n    private static int minutes;\r\n    private boolean wave1Created;\r\n    private boolean wave2Created;\r\n    private boolean wave3Created;\r\n    private static boolean VSCollission;\r\n    private static  boolean VTCollision;\r\n    private static boolean gameDone;\r\n    private Wave wave = new Wave();\r\n    int deadS;\r\n    int deadT;\r\n    int timeBetweenWave;\r\n    private static boolean win;\r\n    private static int lastXP;\r\n    private static boolean lose;\r\n    private boolean hasPlayed;\r\n    //game over sound\r\n    private String [] option = {\"menu\"};\r\n    private SkillTreeController skillTreeController = new SkillTreeController();\r\n    private ShopController shopController = new ShopController();\r\n\r\n    public GameLoop(Game game) throws IOException {\r\n        this.game = game;\r\n    //    start();\r\n   //     elapsedTime();\r\n\r\n    }\r\n    public void elapsedTime(){\r\n        elapsedTimer = new Timer(1000, new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                seconds++;\r\n                if(seconds>=59){\r\n                    seconds = 0;\r\n                    minutes++;\r\n                }\r\n            }\r\n        });\r\n        elapsedTimer.start();\r\n    }\r\n    public void start(){\r\n        timer = new Timer(2, new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n\r\n                if (!KeyListener.getPauseGame()) {\r\n\r\n\r\n                    //waves\r\n                    wave.initWave1();\r\n                    if (!wave1Created) {\r\n                        Game.getSoundPlayer().playSoundEffect(\"src/Sound/wave.wav\");\r\n\r\n                        if(SettingsFrame.getChosenLevel()==0) {\r\n                            for (Squarantine squarantine : wave.wave1EasySquarantine) {\r\n                                Game.getSquarantine().add(squarantine);\r\n                                Game.getEnemies().add(squarantine);\r\n\r\n                            }\r\n                            for (Trigorath trigorath : wave.wave1EasyTrigorath) {\r\n                                Game.getTrigoraths().add(trigorath);\r\n                                Game.getEnemies().add(trigorath);\r\n                            }\r\n                            for(Necropick necropick : wave.wave1EasyNecropicks){\r\n                                Game.getNecropicks().add(necropick);\r\n                                Game.getEnemies().add(necropick);\r\n                            }\r\n                            for(Omenoct omenoct : wave.wave1EasyOmenoct){\r\n                                Game.getOmenocts().add(omenoct);\r\n                                Game.getEnemies().add(omenoct);\r\n\r\n                            }\r\n                            for(Archmire archmire : wave.wave1EasyArchmire){\r\n                                Game.getArchmires().add(archmire);\r\n                                Game.getEnemies().add(archmire);\r\n\r\n                            }\r\n                        }else        if(SettingsFrame.getChosenLevel()==1) {\r\n                            for (Squarantine squarantine : wave.wave1MediumSquarantine) {\r\n                                Game.getSquarantine().add(squarantine);\r\n                                Game.getEnemies().add(squarantine);\r\n                            }\r\n                            for (Trigorath trigorath : wave.wave1MediumTrigorath) {\r\n                                Game.getTrigoraths().add(trigorath);\r\n                                Game.getEnemies().add(trigorath);\r\n                            }\r\n                        }else  if(SettingsFrame.getChosenLevel()==2) {\r\n                            for (Squarantine squarantine : wave.wave1HardSquarantine) {\r\n                                Game.getSquarantine().add(squarantine);\r\n                                Game.getEnemies().add(squarantine);\r\n                            }\r\n                            for (Trigorath trigorath : wave.wave1HardTrigorath) {\r\n                                Game.getTrigoraths().add(trigorath);\r\n                                Game.getEnemies().add(trigorath);\r\n                            }\r\n                        }\r\n                        wave1Created = true;\r\n                        GameInfo.setCurrentWave(1);\r\n                    }\r\n\r\n                    try {\r\n                        intersection = new Intersection(game.getGameFrame());\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n\r\n\r\n                    //if wave 1 ended create wave2\r\n                    if (!wave2Created) {\r\n                        for (Trigorath trigorath : Game.getTrigoraths()) {\r\n                            if (trigorath.isDead()) {\r\n                                deadT++;\r\n\r\n                            }\r\n                        }\r\n                        for (Squarantine squarantine : Game.getSquarantine()) {\r\n                            if (squarantine.isDead()) {\r\n                                deadS++;\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if (deadT >= Game.getTrigoraths().size() && deadS >= Game.getSquarantine().size()) {\r\n                        timeBetweenWave++;\r\n                        if (timeBetweenWave > 500){\r\n                            Game.getSquarantine().clear();\r\n                            Game.getTrigoraths().clear();\r\n                            Game.getEnemies().clear();\r\n                            //    if(nextWave>=200) {\r\n                            wave.initWave2();\r\n                            if (!wave2Created && wave1Created) {\r\n                                Game.getSoundPlayer().playSoundEffect(\"src/Sound/wave.wav\");\r\n\r\n                                if(SettingsFrame.getChosenLevel()==0) {\r\n                                    for (Squarantine squarantine : wave.wave2EasySquarantine) {\r\n                                        Game.getSquarantine().add(squarantine);\r\n                                        Game.getEnemies().add(squarantine);\r\n                                    }\r\n                                    for (Trigorath trigorath : wave.wave2EasyTrigorath) {\r\n                                        Game.getTrigoraths().add(trigorath);\r\n                                        Game.getEnemies().add(trigorath);\r\n                                    }\r\n                                }else        if(SettingsFrame.getChosenLevel()==1) {\r\n                                    for (Squarantine squarantine : wave.wave2MediumSquarantine) {\r\n                                        Game.getSquarantine().add(squarantine);\r\n                                        Game.getEnemies().add(squarantine);\r\n                                    }\r\n                                    for (Trigorath trigorath : wave.wave2MediumTrigorath) {\r\n                                        Game.getTrigoraths().add(trigorath);\r\n                                        Game.getEnemies().add(trigorath);\r\n                                    }\r\n                                }else  if(SettingsFrame.getChosenLevel()==2) {\r\n                                    for (Squarantine squarantine : wave.wave2HardSquarantine) {\r\n                                        Game.getSquarantine().add(squarantine);\r\n                                        Game.getEnemies().add(squarantine);\r\n                                    }\r\n                                    for (Trigorath trigorath : wave.wave2HardTrigorath) {\r\n                                        Game.getTrigoraths().add(trigorath);\r\n                                        Game.getEnemies().add(trigorath);\r\n                                    }\r\n                                }\r\n                                wave2Created = true;\r\n                                GameInfo.setCurrentWave(2);\r\n                            }\r\n                            timeBetweenWave = 0;\r\n\r\n                        }\r\n                    }\r\n                    deadS = 0;\r\n                    deadT =0 ;\r\n                    if(!wave3Created) {\r\n                        for (Trigorath trigorath : Game.getTrigoraths()) {\r\n                            if (trigorath.isDead()) {\r\n                                deadT++;\r\n\r\n                            }\r\n                        }\r\n                        for (Squarantine squarantine : Game.getSquarantine()) {\r\n                            if (squarantine.isDead()) {\r\n                                deadS++;\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if(deadT>= Game.getTrigoraths().size() && deadS>= Game.getSquarantine().size()) {\r\n                        timeBetweenWave++;\r\n                        if (timeBetweenWave > 500) {\r\n\r\n                            Game.getSquarantine().clear();\r\n                            Game.getTrigoraths().clear();\r\n                            Game.getEnemies().clear();\r\n\r\n                            wave.initWave3();\r\n                            if (!wave3Created && wave2Created) {\r\n                                Game.getSoundPlayer().playSoundEffect(\"src/Sound/wave.wav\");\r\n\r\n                                if(SettingsFrame.getChosenLevel()==0) {\r\n                                    for (Squarantine squarantine : Wave.wave3EasySquarantine) {\r\n                                        Game.getSquarantine().add(squarantine);\r\n                                        Game.getEnemies().add(squarantine);\r\n                                    }\r\n                                    for (Trigorath trigorath : wave.wave3EasyTrigorath) {\r\n                                        Game.getTrigoraths().add(trigorath);\r\n                                        Game.getEnemies().add(trigorath);\r\n                                    }\r\n                                }else        if(SettingsFrame.getChosenLevel()==1) {\r\n                                    for (Squarantine squarantine : wave.wave3MediumSquarantine) {\r\n                                        Game.getSquarantine().add(squarantine);\r\n                                        Game.getEnemies().add(squarantine);\r\n                                    }\r\n                                    for (Trigorath trigorath : wave.wave3MediumTrigorath) {\r\n                                        Game.getTrigoraths().add(trigorath);\r\n                                        Game.getEnemies().add(trigorath);\r\n                                    }\r\n                                }else  if(SettingsFrame.getChosenLevel()==2) {\r\n                                    for (Squarantine squarantine : wave.wave3HardSquarantine) {\r\n                                        Game.getSquarantine().add(squarantine);\r\n                                        Game.getEnemies().add(squarantine);\r\n                                    }\r\n                                    for (Trigorath trigorath : wave.wave3HardTrigorath) {\r\n                                        Game.getTrigoraths().add(trigorath);\r\n                                        Game.getEnemies().add(trigorath);\r\n                                    }\r\n                                }\r\n                                wave3Created = true;\r\n                                GameInfo.setCurrentWave(3);\r\n                            }\r\n                            timeBetweenWave = 0;\r\n                        }\r\n                    }\r\n\r\n                    deadS = 0;\r\n                    deadT =0 ;\r\n                    if(wave3Created) {\r\n                        for (Trigorath trigorath : Game.getTrigoraths()) {\r\n                            if (trigorath.isDead()) {\r\n                                deadT++;\r\n\r\n                            }\r\n                        }\r\n                        for (Squarantine squarantine : Game.getSquarantine()) {\r\n                            if (squarantine.isDead()) {\r\n                                deadS++;\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if(deadT>= Game.getTrigoraths().size() && deadS>= Game.getSquarantine().size()){\r\n                        win = true;\r\n                        if(Game.getEpsilon().getRadius()<GamePanel.getFRAME_WIDTH() && Game.getEpsilon().getRadius()<=GamePanel.getFRAME_HEIGHT()) {\r\n                            Game.getEpsilon().setRadius(Game.getEpsilon().getRadius() + 1);\r\n\r\n                        }\r\n\r\n                    }\r\n                    if(win && !hasPlayed){\r\n                        Game.getSoundPlayer().playSoundEffect(\"src/Sound/gameover.wav\");\r\n                        hasPlayed = true;\r\n                    }\r\n\r\n                    if((GamePanel.getFRAME_HEIGHT()<=0 || GamePanel.getFRAME_WIDTH()<=0) && win){\r\n\r\n\r\n                        int purchase = JOptionPane.showOptionDialog(GlassFrame.getINSTANCE(),\r\n                                \"You won! XP:\"+ MyProject.getGameInfo().getXP(), null, JOptionPane.DEFAULT_OPTION,\r\n                                JOptionPane.PLAIN_MESSAGE, null, option, option[0]);\r\n\r\n\r\n                        if(purchase == 0){\r\n\r\n                         //   GlassFrame.getINSTANCE().closeFrame();\r\n\r\n                        new StarterMenu();\r\n                            Game.getSoundPlayer().stopBackgroundMusic();\r\n\r\n                            wave1Created =  false;\r\n                            wave2Created = false;\r\n                            wave3Created = false;\r\n                            countTime = 0;\r\n                            seconds = 0;\r\n                            minutes = 0;\r\n                            banishTime = 0;\r\n                            win = false;\r\n                                 ShopFrame.setHealItem(false);\r\n                            ShopFrame.setBanishItem(false);\r\n                            ShopFrame.setEmpowerItem(false);\r\n                            skillTreeController.setCanUseAbility(false);\r\n                            skillTreeController.setCurrentTime(0);\r\n                            skillTreeController.setLastUsed(0);\r\n                            skillTreeController.setAcesoTimer(0);\r\n                            deadS = 0;\r\n                            deadT = 0;\r\n                            intersectionSide = null;\r\n                            KeyListener.setPauseGame(true);\r\n                            GamePanel.setFRAME_WIDTH(700);\r\n                            GamePanel.setFRAME_HEIGHT(700);\r\n                            gameDone = true;\r\n                            lastXP = Game.getEpsilon().getXP();\r\n                            KeyListener.setKeyPressedNumber(0);\r\n                            KeyListener.setAbilityKeyPressed(false);\r\n                            GameInfo.getCurrentAbility().clear();\r\n                            Game.getSquarantine().clear();\r\n                            Game.getTrigoraths().clear();\r\n                            Game.getEnemies().clear();\r\n\r\n                            Game.getEpsilon().getVertex().clear();\r\n                            hasPlayed = false;\r\n                            timer.stop();\r\n                            elapsedTimer.stop();\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    if(Game.getEpsilon().getHP()<=0) lose = true;\r\n                    if(lose && !hasPlayed){\r\n                        Game.getSoundPlayer().playSoundEffect(\"src/Sound/gameover.wav\");\r\n                        GamePanel.setFRAME_WIDTH(0);\r\n                        GamePanel.setFRAME_HEIGHT(0);\r\n                        hasPlayed = true;\r\n                    }\r\n                    if( lose ) {\r\n\r\n                        frameSize.shrink();\r\n                        GamePanel.setFRAME_WIDTH(0);\r\n                        GamePanel.setFRAME_HEIGHT(0);\r\n                        int purchase = JOptionPane.showOptionDialog(GlassFrame.getINSTANCE(),\r\n                                \"You lost :( XP:\" + MyProject.getGameInfo().getXP(), null, JOptionPane.DEFAULT_OPTION,\r\n                                JOptionPane.PLAIN_MESSAGE, null, option, option[0]);\r\n\r\n                        if (purchase == 0) {\r\n\r\n                            new StarterMenu();\r\n                            Game.getSoundPlayer().stopBackgroundMusic();\r\n                            wave1Created = false;\r\n                            wave2Created = false;\r\n                            wave3Created = false;\r\n                            countTime = 0;\r\n                            seconds = 0;\r\n                            minutes = 0;\r\n                            banishTime = 0;\r\n                            skillTreeController.setAcesoTimer(0);\r\n                            win = false;\r\n                                 ShopFrame.setHealItem(false);\r\n                            ShopFrame.setBanishItem(false);\r\n                            ShopFrame.setEmpowerItem(false);\r\n                            skillTreeController.setCanUseAbility(false);\r\n                            skillTreeController.setCurrentTime(0);\r\n                            skillTreeController.setLastUsed(0);\r\n                            deadS = 0;\r\n                            deadT = 0;\r\n                            intersectionSide = null;\r\n                            KeyListener.setPauseGame(true);\r\n\r\n                            gameDone = true;\r\n                            lastXP = Game.getEpsilon().getXP();\r\n                            KeyListener.setKeyPressedNumber(0);\r\n                            KeyListener.setAbilityKeyPressed(false);\r\n                            GameInfo.getCurrentAbility().clear();\r\n                            SkillTreeFrame.setCurrentXP(Game.getEpsilon().getXP());\r\n                            Game.getEpsilon().getVertex().clear();\r\n                            Game.getSquarantine().clear();\r\n                            Game.getTrigoraths().clear();\r\n                            Game.getEnemies().clear();\r\n                            hasPlayed = false;\r\n                            lose = false;\r\n                            timer.stop();\r\n                            elapsedTimer.stop();\r\n\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                    if (!ShopFrame.isEmpowerItem()) {\r\n                        for (ShotGun shotGun : Game.getShots()) {\r\n                            shotGun.move();\r\n                        }\r\n                    }\r\n\r\n                    for(int i = 0; i< Game.getSquarantine().size(); i++) {\r\n                        Squarantine squarantine = Game.getSquarantine().get(i);\r\n                        squarantine.move();\r\n\r\n                    }\r\n                    for (int i = 0; i < Game.getTrigoraths().size(); i++) {\r\n                        Trigorath trigorath = Game.getTrigoraths().get(i);\r\n                        trigorath.move();\r\n\r\n                    }\r\n                    Game.getEpsilon().move();\r\n\r\n                    for(Vertex vertex : Game.getEpsilon().getVertex()){\r\n                        vertex.move();\r\n                    }\r\n                    for(Cerberus cerberus : Game.getCerberuses()) cerberus.move();\r\n\r\n                    intersection.shotIntersectsEntity();\r\n                    intersection.epsilonIntersectsCollectible();\r\n                    intersection.enemyIntersection();\r\n                    intersection.vertexIntersectsNecropick();\r\n                    intersection.vertexIntersectsOmenoct();\r\n                   intersection.AOEIntersection();\r\n\r\n\r\n\r\n\r\n                    try {\r\n                        frameSize = new FrameSize(game.getGameFrame());\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n                    //shrinkage starts after 10 seconds\r\n                    if (countTime >= 700 ) {\r\n\r\n                      //  frameSize.shrink();\r\n                    }\r\n\r\n\r\n                    //check if a shot intersects with frame edges\r\n                    // if so expansion starts from that side for a second\r\n                    // and impact mechanism activates from that point\r\n\r\n                    for(ShotGun shotGun : Game.getShots()){\r\n                        if(shotGun.isVisible()) intersectionSide = intersection.shotIntersectsFrame(shotGun);\r\n                        if (intersectionSide != null) {\r\n\r\n                            if (shotGun.getExpansion() < 20) {\r\n                                frameSize.expand(intersectionSide);\r\n                                shotGun.setExpansion(shotGun.getExpansion() + 1);\r\n\r\n                                IntersectionPoint point = new IntersectionPoint(new Point2D.Double(shotGun.getX(), shotGun.getY()),10,false,false,null,shotGun);\r\n                                Intersection.getIntersectionPoints().add(point);\r\n                                shotGun.setVisible(false);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    skillTreeController.ableToUseAbility();\r\n                    skillTreeController.activate();\r\n\r\n\r\n                    for(GameObjects enemy : Game.getEnemies()) enemy.invisibleCollectible();\r\n\r\n                    countTime++;\r\n\r\n                    for(int i=0; i<Intersection.getIntersectionPoints().size();i++){\r\n                        IntersectionPoint point = Intersection.getIntersectionPoints().get(i);\r\n                        point.setElapsedTime(point.getElapsedTime()+1);\r\n                        if(point.getElapsedTime()>=point.getTime()){\r\n                            Intersection.getIntersectionPoints().remove(point);\r\n                        }\r\n                    }\r\n                    shopController.activate();\r\n                    ShopController.canUSe();\r\n\r\n                    for(Trigorath trigorath: Game.getTrigoraths() ) {\r\n                        if (!trigorath.isDead()) {\r\n                            VTCollision = false;\r\n                            Epsilon epsilon = Game.getEpsilon();\r\n                            Polygon trigorath2 = new Polygon(trigorath.getxPoints(), trigorath.getyPoints(), 3);\r\n                            for (Vertex vertex : epsilon.getVertex()) {\r\n                                if (intersection.checkCollision((int) vertex.getxCenter(), (int) vertex.getyCenter(), vertex.getRadius(), trigorath2)) {\r\n                                    VTCollision = true;\r\n                                    trigorath.decreaseHP(5);\r\n                                    IntersectionPoint point = new IntersectionPoint(new Point2D.Double(trigorath.getX(), trigorath.getY()),10,false,true,vertex,trigorath);\r\n                                    Intersection.getIntersectionPoints().add(point);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    for(Trigorath trigorath3: Game.getTrigoraths() ) {\r\n                        if (!trigorath3.isDead()) {\r\n\r\n                            Epsilon epsilon = Game.getEpsilon();\r\n                            Polygon trigorath2 = new Polygon(trigorath3.getxPoints(), trigorath3.getyPoints(), 3);\r\n                            //   if (!VTCollision) {\r\n                            if (intersection.checkCollision(epsilon.getxCenter(), epsilon.getyCenter(), epsilon.getRadius(), trigorath2)) {\r\n                                IntersectionPoint point = new IntersectionPoint(new Point2D.Double(trigorath3.getX(), trigorath3.getY()),30,true,false,trigorath3,epsilon);\r\n                                Intersection.getIntersectionPoints().add(point);\r\n                                boolean melee = point.isMeleeAttack();\r\n                                epsilon.decreaseHP(EnemyType.Trigorath,melee);\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    for(Omenoct omenoct: Game.getOmenocts() ) {\r\n                        if (!omenoct.isDead()) {\r\n\r\n                            Epsilon epsilon = Game.getEpsilon();\r\n                            Polygon trigorath2 = new Polygon(omenoct.getxPoints(), omenoct.getyPoints(), 6);\r\n                            //   if (!VTCollision) {\r\n                            if (intersection.checkCollision(epsilon.getxCenter(), epsilon.getyCenter(), epsilon.getRadius(), trigorath2)) {\r\n                                IntersectionPoint point = new IntersectionPoint(new Point2D.Double(omenoct.getX(), omenoct.getY()),30,true,false,omenoct,epsilon);\r\n                                Intersection.getIntersectionPoints().add(point);\r\n                                boolean melee = point.isMeleeAttack();\r\n                                epsilon.decreaseHP(EnemyType.Omenoct,melee);\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                    for(Squarantine squarantine: Game.getSquarantine() ) {\r\n                        if (!squarantine.isDead()) {\r\n                            VSCollission = false;\r\n                            Epsilon epsilon = Game.getEpsilon();\r\n                            Polygon squarantine2 = new Polygon(squarantine.getxPoints(), squarantine.getyPoints(), 4);\r\n                            for (Vertex vertex : epsilon.getVertex()) {\r\n                                if (intersection.checkCollision((int) vertex.getxCenter(), (int) vertex.getyCenter(), vertex.getRadius(), squarantine2)) {\r\n\r\n                                    VSCollission = true;\r\n                                    squarantine.decreaseHP(10);\r\n                                    IntersectionPoint point = new IntersectionPoint(new Point2D.Double(squarantine.getX(), squarantine.getY()),10,false,true,vertex,squarantine);\r\n                                    Intersection.getIntersectionPoints().add(point);\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    for(Squarantine squarantine3: Game.getSquarantine() ){\r\n                        if(!squarantine3.isDead()) {\r\n                            VSCollission = false;\r\n                            Epsilon epsilon = Game.getEpsilon();\r\n                            Polygon squarantine2 = new Polygon(squarantine3.getxPoints(), squarantine3.getyPoints(), 4);\r\n                            //       if (!VSCollission) {\r\n                            if (intersection.checkCollision(epsilon.getxCenter(), epsilon.getyCenter(), epsilon.getRadius(), squarantine2)) {\r\n                                IntersectionPoint point = new IntersectionPoint(new Point2D.Double(squarantine3.getX(), squarantine3.getY()),10,true,false,epsilon,squarantine3);\r\n                                Intersection.getIntersectionPoints().add(point);\r\n                                boolean melee = point.isMeleeAttack();\r\n                                epsilon.decreaseHP(EnemyType.Squarantine,melee);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n\r\n                    for(Necropick necropick : Game.getNecropicks()){\r\n                        necropick.visible();\r\n                        necropick.move();\r\n                        necropick.shoot();\r\n                    }\r\n\r\n                    for(Omenoct omenoct : Game.getOmenocts()){\r\n                        omenoct.chooseSide();\r\n                        omenoct.move();\r\n                        omenoct.shoot();\r\n                    }\r\n                    for(Archmire archmire : Game.getArchmires()){\r\n                        archmire.move();\r\n                        archmire.fadeFootprint();\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    game.getGameFrame().repaint();\r\n                }\r\n            }\r\n        });\r\n        timer.start();\r\n    }\r\n\r\n    public static int getSeconds() {\r\n        return seconds;\r\n    }\r\n\r\n    public static int getMinutes() {\r\n        return minutes;\r\n    }\r\n\r\n    public static boolean isWin() {\r\n        return win;\r\n    }\r\n\r\n    public static boolean isGameDone() {\r\n        return gameDone;\r\n    }\r\n\r\n    public static boolean isLose() {\r\n        return lose;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/GameLoop.java b/src/Model/GameLoop.java
--- a/src/Model/GameLoop.java	
+++ b/src/Model/GameLoop.java	
@@ -449,7 +449,7 @@
                     //shrinkage starts after 10 seconds
                     if (countTime >= 700 ) {
 
-                      //  frameSize.shrink();
+                    //    frameSize.shrink();
                     }
 
 
